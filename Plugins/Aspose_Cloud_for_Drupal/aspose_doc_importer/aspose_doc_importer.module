<?php

/**
 * @file
 * A module to import DOC to content
 */

use Aspose\Cloud\Common\AsposeApp;
use Aspose\Cloud\Common\Product;
use Aspose\Cloud\Storage\Folder;
use Aspose\Cloud\Words\Extractor;
use Aspose\Cloud\Words\Converter as WordsConverter;

// Implements init hook for module
function aspose_doc_importer_init() {
    $path = drupal_get_path('module', 'aspose_doc_importer');

    // Load jquery libraries in drupal way
    drupal_add_library('system', 'ui.tabs');
    drupal_add_library('system', 'ui.dialog');
    drupal_add_library('system', 'drupal.ajax');

    // Load CSS for Aspose module
    drupal_add_css($path . '/css/style.css', 'theme', 'all', FALSE);

    // Load JS for Aspose module
    drupal_add_js($path . '/scripts/ajaxfileupload.js');
    drupal_add_js($path . '/scripts/aspose_doc_importer_script.js');
}

// Autoloader for initializing/loading Aspose Library files
function my_autoloader($class) {
    $allowed_namespace = array('AsposeApp','Product','Folder','Converter','Utils','Extractor');
    $arr = explode('\\', $class);
    $path = drupal_get_path('module', 'aspose_doc_importer');
    if( in_array( $arr['3'] , $allowed_namespace)){
        include 'Aspose_Cloud_SDK_For_PHP-master/src/'. $arr[0] . '/' . $arr[1] . '/' .$arr[2] . '/' . $arr[3] . '.php';
    }
}

/**
 * Implementation of hook_theme()
 *
 * Method to tell drupal to include modules's templates
 */
function aspose_doc_importer_theme()
{
    $path = drupal_get_path('module', 'aspose_doc_importer');
    return array
    (
        'doc_importer_html' => array
        (
            'arguments' => array
            (
                'base_url' => NULL,
            ),
            'path' => $path . '/templates',
            'template' => 'doc-importer-html',
        ),
    );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter Edit/Add node form to inject in Aspose Module markup
 */
function aspose_doc_importer_form_node_form_alter(&$form, &$form_state, $form_id) {
    /*if (empty($form_state['input']) && isset($form['#node']->nid)) {
        drupal_set_message(t('Triggered For editing.'));
    } else if (empty($form_state['input'])) {
        drupal_set_message(t('Triggered For New.'));
    }*/
    spl_autoload_register('my_autoloader');

    if (empty($form_state['input'])) {
        $type = node_type_get_type($form['#node']);

        global $base_url;

        // Get template initialized earlier in [aspose_doc_importer_theme]
        $doc_importer_html = theme('doc_importer_html', array('base_url' => $base_url));
        $form['ssl_logo'] = array
        (
            '#markup' => $doc_importer_html,
            '#required' => FALSE,
            '#weight' => -5,
        );
    }
}

// Custom callback function to handle file sent via ajax request
function aspose_doc_importer_upload_file() {
    spl_autoload_register('my_autoloader');
    /*
     *  Assign appSID and appKey of your Aspose App
     */
    AsposeApp::$appSID = variable_get('_aspose_api_sid_value'); //'a80cbe61-43ee-46da-a495-57c7ee3ca2a5';
    AsposeApp::$appKey = variable_get('_aspose_api_key_value'); //'37ee284f06034e6069c1a47aae660f25';

    spl_autoload_register('my_autoloader');

    if(empty(AsposeApp::$appSID) || empty(AsposeApp::$appKey)) {
        $jsonArray = array();
        $jsonArray['success'] = false;
        $jsonArray['message'] = 'Please go to settings page and enter valid Aspose Cloud App ID & Key.';

        return drupal_json_output($jsonArray);
    }

    /*
     * Assign Base Product URL
     */
    Product::$baseProductUri = 'http://api.aspose.com/v1.1';

    // Define a destination
    $targetFolder = '/aspose_uploads';

    $jsonArray = array();

    // If an existing file from cloud is selected to convert
    if(isset($_POST['existing_file']) && !empty($_POST['existing_file'])) {
        $converter = new WordsConverter($_POST['existing_file']);
        $converter->saveFormat = 'html';
        $content = $converter->convert();
        $content = preg_replace('/(<[^>]+) style=".*?"/i', '$1', $content);

        $jsonArray['success'] = true;
        $jsonArray['message'] = 'Successfully Uploaded.';
        $jsonArray['file_content'] = $content;

        return drupal_json_output($jsonArray);
    } else if (!empty($_FILES)) { // In case a new file is uploaded
        $tempFile = $_FILES['filePath']['tmp_name'];
        $targetPath = dirname(__FILE__) . $targetFolder;
        $targetFile = rtrim($targetPath,'/') . '/' . time() . '_TT_' .  $_FILES['filePath']['name'];

        // Validate the file type
        $fileTypes = array('doc','docx'); // File extensions
        $fileParts = pathinfo($_FILES['filePath']['name']);

        if (in_array($fileParts['extension'], $fileTypes)) {
            move_uploaded_file($tempFile, $targetFile);

            $uploadpath = $targetPath;
            $uploadpath = str_replace('/','\\',$uploadpath);
            $uploadpath = $uploadpath . '\\';

            AsposeApp::$outPutLocation = $uploadpath; // 'F:\\xampp\htdocs\\wordpress\\uploads\\';

            if(!isset($_REQUEST['aspose'])) {
                $folder = new Folder();
                $uploadpath = str_replace("\\","/", $uploadpath);
                $uploadFile = $targetFile; 
                $folder->uploadFile($uploadFile, '');
            }
			
			$targetFileDetails = pathinfo($targetFile);
			
            $content = '';
            $converter = new WordsConverter($targetFileDetails['basename']);
            $converter->saveFormat = 'html';
            $content = $converter->convert();
            //$content = preg_replace('/(<[^>]+) style=".*?"/i', '$1', $content);

            $jsonArray['success'] = true;
            $jsonArray['message'] = 'Successfully Uploaded.';
            $jsonArray['file_content'] = $content;

            return drupal_json_output($jsonArray);
        } else {
            $jsonArray['success'] = false;
            $jsonArray['message'] = 'Invalid File selected.';
            return drupal_json_output($jsonArray);
        }
    }
}

/*
 * Implements menu hook
 *
 * This is to tell drupal about our custom links, we will use for
 * ajax requests and to display settings page.
 */
function aspose_doc_importer_menu () {
    // Simple AJAX callback
    $items['ajax/UploadDocToCloud'] = array(
        'title' => 'Upload New DOC File',
        'file' => 'aspose_doc_importer.module',
        'page callback' => 'aspose_doc_importer_upload_file',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['admin/settings/aspose-doc-importer-settings'] = array(
        'title' => 'Aspose DOC Importer Settings',
        'description' => t('API Configurations for DOC Importer'),
        'page callback' => 'drupal_get_form', // assuming that you want to use a form
        'page arguments' => array('_aspose_doc_importer_form_builder'),
        'access callback' => 'user_access',
        'access arguments' => array('administer content types'), // or use hook_perm() to make your own
        'type' => MENU_LOCAL_ACTION,
    );

    return $items;
}

/*
 * Method to create settings page for Aspose DOC Importer module.
 *
 */
function _aspose_doc_importer_form_builder() {
    // Input fields for settings form
    $form['aspose_api_sid'] = array(
        '#type' => 'textfield',
        '#title' => t('APP SID'),
        '#default_value' => variable_get('_aspose_api_sid_value') //false by default
    );

    $form['aspose_api_key'] = array(
        '#type' => 'textfield',
        '#title' => t('APP KEY'),
        '#default_value' => variable_get('_aspose_api_key_value') //false by default
    );

    // saves and executes a submission callback
    $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#executes_submit_callback' => true
    );

    $form['#submit'] = array(
        '_aspose_doc_importer_form_submit_special_fuction_name'
    );

    return $form;
}

/*
 * Method to handle settings form submission
 *
 */
function _aspose_doc_importer_form_submit_special_fuction_name($form, &$form_state){
    //check $form_state['values'] and use this below line to set the value
    variable_set('_aspose_api_sid_value', $_POST['aspose_api_sid']);
    variable_set('_aspose_api_key_value', $_POST['aspose_api_key']);
}

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function aspose_doc_importer_help($path, $arg) {
    switch ($path) {
        case "admin/help#aspose_doc_importer":
            return '<p>' . t("Aspose DOC Importer help") . '</p>';
            break;
    }
}

/**
 * Implements hook_block_info().
 */
function aspose_doc_importer_block_info() {
    $blocks['aspose_doc_importer'] = array(
        // The name that will appear in the block list.
        'info' => t('Aspose DOC Importer module Info Hook'),
        // Default setting.
        //'cache' => DRUPAL_CACHE_PER_ROLE,
        'cache' => DRUPAL_NO_CACHE,
    );
    return $blocks;
}

function hook_block_view() {
    $blocks['aspose_doc_importer'] = array(
        // The name that will appear in the block list.
        'info' => t('My Module from Block View'),
        // Default setting.
        //'cache' => DRUPAL_CACHE_PER_ROLE,
        'cache' => DRUPAL_NO_CACHE,
    );
    return $blocks;
}

/**
 * Custom content function.
 *
 * Method to get files already uploaded on aspose cloud
 *
 */
function aspose_doc_importer_cloud_files() {

    spl_autoload_register('my_autoloader');
    /*
     *  Assign appSID and appKey of your Aspose App
     */
    AsposeApp::$appSID = variable_get('_aspose_api_sid_value'); //'a80cbe61-43ee-46da-a495-57c7ee3ca2a5';
    AsposeApp::$appKey = variable_get('_aspose_api_key_value'); //'37ee284f06034e6069c1a47aae660f25';

    if(empty(AsposeApp::$appSID) || empty(AsposeApp::$appKey)) {
        echo '<h3 style="color:red"> Please go to settings page and enter valid Aspose Cloud App ID & Key. </h3>';
        return;
    }

    /*
     * Assign Base Product URL
     */
    Product::$baseProductUri = 'http://api.aspose.com/v1.1';

    if(isset($_REQUEST['aspose_folder']) && !empty($_REQUEST['aspose_folder'])) {
        $aspose_folder = $_REQUEST['aspose_folder'];
    } else {
        $aspose_folder = '';
    }


    $folder = new Folder();

    $files = $folder->getFilesList($aspose_folder);

    $asposeFolders = array();
    $asposeFiles = array();
    $options = '<option> --- Select Folder --- </option>';
    $aspose_files_rows = "
    <tr>
                    <td width=\"5%\"> </td>
					<td width=\"95%\" ><strong> File Name </strong> </td>

                  </tr>
";
    if(is_array($files)) {
        foreach($files as $file){
            if($file->IsFolder == '1'){
                array_push($asposeFolders,$file->Name);
                $options .= '<option value="'.$file->Name.'">'.$file->Name.'</option>';
            } else {
                array_push($asposeFiles,$file->Name);
                if($aspose_folder !=''){
                    $aspose_folder = $aspose_folder . '/';
                }
                $aspose_files_rows .= '
                <tr>
                    <td> <input type="radio" name="aspose_filename" value="'.$aspose_folder . $file->Name.'" /> </td>
                    <td> '.$file->Name.' </td>
                </tr>
            ';
            }
        }
    }
    if(is_array($asposeFolders) && count($asposeFolders) > 0) {
        $select_aspose_folder = '<select name="aspose_folder_name" id="aspose_folder_name">';
        $select_aspose_folder .= $options;
        $select_aspose_folder .='</select>';
    } else {
        $select_aspose_folder = '';
    }

    if(count($asposeFiles) < 1){
        $aspose_files_rows = '
        <tr>
            <td colspan="2"> No Files Found. </td>
        </tr>
    ';
    }

    $result = '<tr>
		<td>'.$select_aspose_folder.'</td>
		</tr>
		<tr>
		<td>
		 <table id="bucket_files" cellspacing="8" width="100%">
		    '.$aspose_files_rows.'
		 </table>
		</td>
		</tr>
	';

    return $result;
}